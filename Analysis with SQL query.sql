#Q-1 HOW MANY TRIPS GOT COMPLETED SUCCESSFULLY 

SELECT COUNT(*) FROM TRIPS_DETAILS1
WHERE END_RIDE=1; 

#Q-2 CHECK WHETHER WE HAVE ANY DUPLICATE TRIPS IN THE TABLE 

SELECT * FROM trips_details1;
SELECT TRIPID, COUNT(DISTINCT TRIPID) AS CNT FROM TRIPS_DETAILS1
GROUP BY TRIPID 
HAVING COUNT(TRIPID)>1; 

#Q-3 FIND THE TOTAL NO OF DRIVERS 
SELECT * FROM TRIPS; 
SELECT COUNT(DISTINCT DRIVERID) COUNT_OF_DRIVERS FROM TRIPS; 

#Q-4 FIND THE TOTAL NO_OF_FARE BY DRIVER 

SELECT * FROM TRIPS; 
SELECT SUM(FARE) AS SUM_OF_EARNINGS FROM TRIPS; 

#Q-5 FIND THE TOTAL NO OF COMPLETED TRIPS 

SELECT * FROM TRIPS; 
SELECT COUNT(DISTINCT TRIPID)AS TRIPS_COMPLETED FROM TRIPS; 

#Q-6 FIND THE TOTAL NO_OF_SEARCHES 
SELECT * FROM TRIPS_DETAILS1; 
SELECT COUNT(SEARCHES) SEARCHES FROM TRIPS_DETAILS1; 

#Q-7 FIND THE TOTAL NO_OF_SEARCHES WHICH GOT ESTIMATE 
SELECT SUM(SEARCHES_GOT_ESTIMATE) SEARCHES FROM TRIPS_DETAILS1; 

#Q-8 FIND THE TOTAL NO_OF_QUOTES  
SELECT SUM(SEARCHES_FOR_QUOTES) SEARCHES_QUOTE FROM TRIPS_DETAILS1;	

#Q-9 FIND THE TOTAL NO_OF_GOT_QUOTES 

#Q-10 FIND THE TOTAL NO_OF_DRIVERS CANCELLED RIDE 
SELECT * FROM TRIPS_DETAILS1; 
SELECT COUNT(*)- SUM(DRIVER_NOT_CANCELLED) RIDE_CANCELLED FROM TRIPS_DETAILS1; 

#Q-11 FIND THE TOTAL NO_OF OTP_GOT ENTERED 
SELECT SUM(OTP_ENTERED) RIDE_CANCELLED FROM TRIPS_DETAILS1; 

#Q-12 FIND THE TOTAL NO_OF_END RIDES 

SELECT SUM(END_RIDE) END_RIDE FROM TRIPS_DETAILS1; 

#Q-13 FIND THE AVERAGE DISTANCE PER TRIP 
SELECT * FROM TRIPS;  
SELECT AVG(DISTANCE)AS AVG_DISTANCE FROM TRIPS; 

#Q-14 FIND THE AVERAGE FARE PER TRIP 
SELECT * FROM TRIPS; 
SELECT AVG(FARE) FARE_AVG FROM TRIPS;  

#Q-15 FIND THE TOTAL_NO_OF DISTANCE TRAVELLED 
SELECT * FROM TRIPS; 
SELECT SUM(DISTANCE) TOTAL_DISTANCE FROM TRIPS; 

#Q-16 FIND THE MOST USED PAYMENT METHOD 
SELECT * FROM TRIPS; 

SELECT A.METHOD FROM PAYMENT A INNER JOIN 
(SELECT FAREMETHOD, COUNT(DISTINCT TRIPID)COUNT_TRIP FROM TRIPS 
GROUP BY FAREMETHOD 
ORDER BY COUNT(DISTINCT TRIPID) DESC 
LIMIT 1) B 
ON A.ID = B.FAREMETHOD; 

#Q-17 FIND THE HIGHEST PAYMENT WAS MADE THROUGH WHICH INSTRUMENT 
SELECT A.METHOD FROM PAYMENT A INNER JOIN 
(SELECT * FROM TRIPS 
ORDER BY FARE DESC
LIMIT 1) B
ON A.ID = B.FAREMETHOD;  

#Q-18 FIND FROM WHICH PAYMENTMETHOD THE HIGHEST PAYMENT WAS HAPPEND 
SELECT * FROM TRIPS;  

SELECT FAREMETHOD, SUM(FARE) TOTAL_FARE 
FROM TRIPS 
GROUP BY FAREMETHOD 
ORDER BY SUM(FARE) DESC
LIMIT 1; 

#Q-19 FIND THE TWO LOCATIONS WHICH HAD THE MOST NO_OF_TRIPS 
SELECT * FROM TRIPS; 

SELECT LOC_FROM,LOC_TO, COUNT(DISTINCT TRIPID) TOTAL_NO_TRIPS 
FROM TRIPS 
GROUP BY LOC_FROM, LOC_TO 
ORDER BY COUNT(DISTINCT TRIPID) DESC 
LIMIT 2; 

#Q-20 FIND THE TOP FIVE EARNING DRIVERS 
SELECT * FROM 
(SELECT *,DENSE_RANK()OVER( ORDER BY TOTAL_EARNINGS DESC)RNK 
FROM 
(SELECT DRIVERID, SUM(FARE) TOTAL_EARNINGS  
FROM TRIPS 
GROUP BY DRIVERID)B)C 
WHERE RNK<6; 

#Q-21 FIND WHICH DURATION HAS MORE TRIPS 
SELECT * FROM  
(SELECT *,DENSE_RANK() OVER(ORDER BY COUNT_TRIPS DESC) RNK FROM 	
(SELECT DURATION, COUNT(TRIPID) COUNT_TRIPS 
FROM TRIPS 
GROUP BY DURATION)B)C 
WHERE RNK=1; 

#Q-22 FIND WHICH DRIVER,CUSTOMER PAIR HAS MORE ORDERS 
SELECT * FROM TRIPS;  

SELECT * FROM 
(SELECT *, RANK() OVER(ORDER BY COMBINATION_TRIPS DESC)RNK FROM 
(SELECT DRIVERID, CUSTID, COUNT(TRIPID) COMBINATION_TRIPS 
FROM TRIPS 
GROUP BY DRIVERID,CUSTID)B)C
WHERE RNK=1;	

#Q-23 FIND THE ESTIMATE RATE  

SELECT * FROM TRIPS_DETAILS1;  
SELECT SUM(SEARCHES_GOT_ESTIMATE)/SUM(SEARCHES)*100 AS ESTIMATE_RATE 
FROM TRIPS_DETAILS1;  

#Q-24 FIND THE ESTIMATE TO SEARCH FOR QUOTE RATES 

SELECT SUM(SEARCHES_GOT_ESTIMATE)/SUM(SEARCHES_FOR_QUOTES)*100 AS ESTIMATE_QUOTE_RATE 
FROM TRIPS_DETAILS1;  

#Q-25 FIND WHICH AREA GOT HIGHEST TRIPS IN WHICH DURATION 

SELECT * FROM TRIPS; 
SELECT * FROM  
(SELECT *, RANK() OVER(PARTITION BY DURATION ORDER BY TRIPS_COUNT)RNK FROM   
(SELECT DURATION, LOC_FROM, COUNT(DISTINCT TRIPID)AS TRIPS_COUNT 
FROM TRIPS 
GROUP BY DURATION,LOC_FROM)A)B	
WHERE RNK=1; 

#Q-26 WHICH AREA GOT THE HIGHEST FARE, 
SELECT * FROM TRIPS; 

SELECT * FROM
(SELECT *,RANK() OVER(ORDER BY TOTAL_FARE DESC) RNK
FROM
(SELECT LOC_FROM, SUM(FARE) TOTAL_FARE FROM TRIPS 
GROUP BY LOC_FROM)B)C 
WHERE RNK=1; 

#Q-27 WHICH AREA GOT THE HIGHEST_NO_CANCELLATIONS FROM DRIVERS  
SELECT * FROM TRIPS_DETAILS1; 

SELECT * FROM  
(SELECT *, RANK() OVER(ORDER BY LOC_HIGHEST_CANCELLATION DESC) RNK 
FROM 
(SELECT LOC_FROM,COUNT(*)- SUM(DRIVER_NOT_CANCELLED) LOC_HIGHEST_CANCELLATION 
FROM TRIPS_DETAILS1 
GROUP BY LOC_FROM)A)B 
WHERE RNK=1; 

#Q-28 WHICH AREA GOT THE HIGHEST_NO_CANCELLATIONS FROM CUSTOMERS 
SELECT * FROM  
(SELECT *, RANK() OVER(ORDER BY LOC_HIGHEST_CANCELLATION DESC) RNK 
FROM 
(SELECT LOC_FROM,COUNT(*)- SUM(CUSTOMER_NOT_CANCELLED) LOC_HIGHEST_CANCELLATION 
FROM TRIPS_DETAILS1 
GROUP BY LOC_FROM)A)B 
WHERE RNK=1;  


#Q-29 WHICH DURATION GOT THE HIGHEST NO OF  FARES  
SELECT * FROM
(SELECT *, RANK() OVER(ORDER BY TOTAL_NO_FARE DESC) RNK 
FROM 
(SELECT DURATION, SUM(FARE)AS TOTAL_NO_FARE 
FROM TRIPS 
GROUP BY DURATION)A)B 
WHERE RNK=1; 

#Q-30 WHICH DURATION GOT THE HIGHEST NO OF TRIPS 
SELECT * FROM
(SELECT *, RANK()OVER(ORDER BY TOTAL_TRIPS DESC)RNK 
FROM
(SELECT DURATION, COUNT(DISTINCT TRIPID) AS TOTAL_TRIPS 
FROM TRIPS 
GROUP BY DURATION)A)B 
WHERE RNK=1; 



